@{
    ViewData["Title"] = "StopsList";
}

@model ee.Models.StopsViewModel

@{
    // Sort the places by stop name
    Model.Stops.Sort((p1, p2) => string.Compare(p1.Name, p2.Name));
}

<style>
    body {
        font-family: Arial, sans-serif;
        margin: 0;
        padding: 0;
        background-color: #f2f2f2;
    }

    .container {
        max-width: 800px;
        margin: 0 auto;
        padding: 20px;
    }

    .table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 20px;
    }

        .table th,
        .table td {
            padding: 10px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }

        .table th {
            background-color: #f2f2f2;
        }

    .table-row-even {
        background-color: #f9f9f9;
    }

    .table-row-odd {
        background-color: #ffffff;
    }

    .details-button {
        border-radius: 20px;
        padding: 6px 12px;
        background-color: #4CAF50;
        color: white;
        border: none;
        cursor: pointer;
    }

        .details-button:hover {
            background-color: #45a049;
        }

    .headline {
        font-size: 70px;
        font-weight: bold;
        text-align: center;
        margin-bottom: 20px;
    }

    .filter-buttons {
        display: flex;
        flex-wrap: wrap;
        justify-content: center;
    }

    .filter-group {
        width: 100%;
    }

    .filter-row {
        display: flex;
        justify-content: center;
        margin-bottom: 10px;
    }

    .filter-button {
        border-radius: 20px;
        padding: 6px 12px;
        background-color: #ddd;
        color: #555;
        border: none;
        cursor: pointer;
        margin-right: 10px;
        flex: 0 0 auto;
        width: 40px;
        height: 40px;
        display: flex;
        justify-content: center;
        align-items: center;
    }
    .filter-button-all {
        width: 100%;
    }
</style>

<div class="container">
    <h1 class="headline">Stops in Brno</h1>

    <div class="filter-buttons">
        <div class="filter-group">
            <div class="filter-row">
                @for (char c = 'A'; c <= 'M'; c++)
                {
                    <button onclick="filterStops('@c')" class="filter-button">@c</button>
                }
            </div>
        </div>
        <div class="filter-group">
            <div class="filter-row">
                @for (char c = 'N'; c <= 'Z'; c++)
                {
                    <button onclick="filterStops('@c')" class="filter-button">@c</button>
                }
            </div>
        </div>
        <div class="filter-group">
            <div class="filter-row">
                <button onclick="filterStops('all')" class="filter-button filter-button-all">All</button>
            </div>
        </div>
    </div>


    <table class="table">
        <thead>
            <tr>
                <th>Stop ID</th>
                <th>Stop Name</th>
                <th>Sights</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var stop in Model.Stops)
            {
                var index = Model.Stops.IndexOf(stop);
                var x = stop.Geometry.X.ToString().Replace(',', '.');
                var y = stop.Geometry.Y.ToString().Replace(',', '.');
                <tr class="table-row" data-stopname="@stop.Name">
                    <td>@stop.Id</td>
                    <td class="stop-name">@Html.Raw(stop.Name)</td>
                    <td>
                        <button onclick="showDetails('@x','@y')" class="details-button">Show</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

<script>function filterStops(filter) {
        var tableRows = document.getElementsByClassName("table-row");
        for (var i = 0; i < tableRows.length; i++) {
            var stopName = tableRows[i].getAttribute("data-stopname");
            if (filter === "all" || stopName.startsWith(filter)) {
                tableRows[i].style.display = "";
            } else {
                tableRows[i].style.display = "none";
            }
        }

        // Set the active class for the filter buttons
        var filterButtons = document.getElementsByClassName("filter-button");
        for (var i = 0; i < filterButtons.length; i++) {
            filterButtons[i].classList.remove("active");
        }
        var selectedButton = document.querySelector(".filter-button[data-filter='" + filter + "']");
        selectedButton.classList.add("active");

        // Update the query string with the selected filter
        var url = new URL(window.location.href);
        url.searchParams.set("filter", filter);
        history.replaceState(null, null, url.href);
    }

    function showDetails(x, y) {
        // Redirect to the details view
        window.location.replace("/Sights/View?x=" + encodeURIComponent(x) + "&y=" + encodeURIComponent(y));
    }</script>

<style>
    .filter-button.active {
        background-color: #4CAF50;
        color: white;
    }
</style>

